/*
 * This file is generated by jOOQ.
 */
package ru.zagamaza.competition.infra.dao.jooq.schema.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.zagamaza.competition.infra.dao.jooq.schema.Indexes;
import ru.zagamaza.competition.infra.dao.jooq.schema.Keys;
import ru.zagamaza.competition.infra.dao.jooq.schema.Public;
import ru.zagamaza.competition.infra.dao.jooq.schema.tables.records.UserFriendRecord;


/**
 * Таблица связи друзей
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFriend extends TableImpl<UserFriendRecord> {

    private static final long serialVersionUID = -808863610;

    /**
     * The reference instance of <code>public.user_friend</code>
     */
    public static final UserFriend USER_FRIEND_ENTITY = new UserFriend();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFriendRecord> getRecordType() {
        return UserFriendRecord.class;
    }

    /**
     * The column <code>public.user_friend.id</code>.
     */
    public final TableField<UserFriendRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('user_friend_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.user_friend.user_id</code>. идентификатор пользователя
     */
    public final TableField<UserFriendRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "идентификатор пользователя");

    /**
     * The column <code>public.user_friend.user_friend_id</code>. идентификатор друга пользователя
     */
    public final TableField<UserFriendRecord, Integer> USER_FRIEND_ID = createField("user_friend_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "идентификатор друга пользователя");

    /**
     * The column <code>public.user_friend.created</code>.
     */
    public final TableField<UserFriendRecord, OffsetDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.user_friend</code> table reference
     */
    public UserFriend() {
        this(DSL.name("user_friend"), null);
    }

    /**
     * Create an aliased <code>public.user_friend</code> table reference
     */
    public UserFriend(String alias) {
        this(DSL.name(alias), USER_FRIEND_ENTITY);
    }

    /**
     * Create an aliased <code>public.user_friend</code> table reference
     */
    public UserFriend(Name alias) {
        this(alias, USER_FRIEND_ENTITY);
    }

    private UserFriend(Name alias, Table<UserFriendRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFriend(Name alias, Table<UserFriendRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица связи друзей"));
    }

    public <O extends Record> UserFriend(Table<O> child, ForeignKey<O, UserFriendRecord> key) {
        super(child, key, USER_FRIEND_ENTITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_FRIEND_PKEY, Indexes.USER_FRIEND_USER_FRIEND_ID_IX, Indexes.USER_FRIEND_USER_ID_IX, Indexes.USER_FRIEND_USER_ID_USER_FRIEND_ID_AK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserFriendRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_FRIEND_ENTITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserFriendRecord> getPrimaryKey() {
        return Keys.USER_FRIEND_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserFriendRecord>> getKeys() {
        return Arrays.<UniqueKey<UserFriendRecord>>asList(Keys.USER_FRIEND_PKEY, Keys.USER_FRIEND_USER_ID_USER_FRIEND_ID_AK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserFriendRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserFriendRecord, ?>>asList(Keys.USER_FRIEND__USER_FRIEND_USER_ID_FK, Keys.USER_FRIEND__USER_USER_ID_FK);
    }

    public User userFriend_UserFriendUserIdFk() {
        return new User(this, Keys.USER_FRIEND__USER_FRIEND_USER_ID_FK);
    }

    public User userFriend_UserUserIdFk() {
        return new User(this, Keys.USER_FRIEND__USER_USER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserFriend as(String alias) {
        return new UserFriend(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserFriend as(Name alias) {
        return new UserFriend(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFriend rename(String name) {
        return new UserFriend(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFriend rename(Name name) {
        return new UserFriend(name, null);
    }
}
