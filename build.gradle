buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'
        swaggerVersion = '2.9.2'
        jooqVersion = '3.11.11'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
                "org.jooq:jooq-codegen:${jooqVersion}",
                "org.jooq:jooq:${jooqVersion}",
                "org.jooq:jooq-meta:${jooqVersion}",
                'org.glassfish.jaxb:jaxb-runtime:2.3.1',
                'com.sun.activation:javax.activation:1.2.0',
                'org.postgresql:postgresql:42.2.5',
                'com.bmuschko:gradle-docker-plugin:4.9.0'
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'com.avast.gradle.docker-compose' version '0.9.4'
    id 'jacoco'
    id 'net.ltgt.apt' version '0.20'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.ltgt.apt-idea'
apply from: 'version/version.gradle'
apply from: 'docker/docker.gradle'
apply from: 'src/test/test.gradle'

group = 'ru.rtlabs.cocos'
sourceCompatibility = '11'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-jooq',
            'org.springframework.boot:spring-boot-starter-amqp',
            'org.springframework.data:spring-data-commons:2.1.1.RELEASE',
            "io.springfox:springfox-swagger2:${swaggerVersion}",
            "io.springfox:springfox-swagger-ui:${swaggerVersion}",
            'org.postgresql:postgresql:42.2.5',
            'net.logstash.logback:logstash-logback-encoder:5.1',
            'ch.qos.logback:logback-classic:1.2.3',
            'org.liquibase:liquibase-core:3.6.3',
            'org.mapstruct:mapstruct-jdk8:1.3.0.Final'

    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'

    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'

    testRuntime 'org.objenesis:objenesis:2.6',
            'cglib:cglib-nodep:3.1'
    testCompile 'org.springframework.boot:spring-boot-starter-test',
            'org.spockframework:spock-core:1.3-groovy-2.5',
            'org.springframework.amqp:spring-rabbit-test',
            'org.spockframework:spock-spring:1.3-groovy-2.5',
            'org.codehaus.groovy:groovy-all:2.5.7'

}

configurations {
    bootJar.archiveName = "${project.name}.jar"
}

def writer = new StringWriter()
new MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
            jdbc() {
                driver('org.postgresql.Driver')
                url('jdbc:postgresql://localhost:15430/competitiondb')
                user('postgres')
                password('passw0rd')
            }
            generator() {
                database {
                    inputSchema 'public'
                }
                generate() {
                    pojos true
                    pojosEqualsAndHashCode true
                }
                target() {
                    packageName('ru.zagamaza.competition.infra.dao.jooq.schema')
                    directory('src/main/java')
                }
                strategy() {
                    matchers() {
                        tables() {
                            table() {
                                tableIdentifier() {
                                    transform 'UPPER'
                                    expression '$0_Entity'
                                }
                                pojoClass() {
                                    transform 'PASCAL'
                                    expression '$0_Entity'
                                }
                            }
                            table() {
                                pojoImplements 'ru.zagamaza.competition.infra.dao.entity.Entity'
                            }
                        }
                    }
                }
            }
        }


import groovy.xml.MarkupBuilder
import org.apache.tools.ant.filters.ReplaceTokens
import org.jooq.codegen.GenerationTool

task generateJOOQ() {
    doLast {
        GenerationTool.generate(writer.toString())
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "project.version": project.version.toString()
    ]
}